#!bin/bash

# ==============================================================================
# DOTFILES
# ==============================================================================
# This script is intended to be run on a fresh Linux installation.
# Supports: Arch.
# Planned support for Debian, Fedora, etc.
# Local test command: bash ./bin/dotfiles --help

# ==============================================================================
# SHELL OPTIONS & ERROR HANDLING
# ==============================================================================
# set -euo pipefail
set -e # Exit on error
set -u # Exit on undefined variable
set -o pipefail # Return the exit status of the last command in the pipeline that failed
# set -x # Debug mode

# ==============================================================================
# CONSTANTS & GLOBAL VARIABLES
# ==============================================================================
readonly DOTFILES_REPO="https://github.com/albertopingo/dotfiles.git"
readonly DOTFILES_DIR="$HOME/.dotfiles"
readonly FIRST_RUN_MARKER="$HOME/.dotfiles/first_run"

# Colors for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly BLUE='\033[0;34m'
readonly YELLOW='\033[1;33m'
readonly NC='\033[0m' # No Color

# ==============================================================================
# UTILITY FUNCTIONS
# ==============================================================================

print_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

is_first_run() {
    [ ! -f "$FIRST_RUN_MARKER" ]
}

mark_first_run_complete() {
    touch "$FIRST_RUN_MARKER"
}

# ==============================================================================
# SETUP FUNCTIONS
# ==============================================================================

detect_distro() {
    if [ -f /etc/os-release ]; then
        (source /etc/os-release; echo "$ID")
    else
        echo "$(uname -s | tr '[:upper:]' '[:lower:]')"
    fi
}

setup_arch() {
    print_info "Running initial Arch setup..."
    # Upgrade system
    sudo pacman -Syu --noconfirm

    # Install essential packages
    sudo pacman -S --needed --noconfirm git curl base-devel ansible

    # Install yay
    if ! command -v yay &> /dev/null; then
        print_info "Installing yay..."
        git clone https://aur.archlinux.org/yay.git /tmp/yay
        cd /tmp/yay
        makepkg -si --noconfirm
        rm -rf /tmp/yay
    fi
}

setup_git_config() {
    print_info "Setting up Git..."
    # Check if Git is installed
    if ! command -v git &> /dev/null; then
        print_error "Git is not installed. Please install Git first."
        exit 1
    fi

    if git config --global user.name &> /dev/null && git config --global user.email &> /dev/null; then
        print_info "Git is already configured"
        return 0
    fi

    print_info "Configuring Git..."

    printf "Enter your Git username: "
    read -r git_username < /dev/tty
    printf "Enter your Git email: "
    read -r git_email < /dev/tty

    git config --global user.name "$git_username"
    git config --global user.email "$git_email"

    print_info "Git configured successfully"
}

setup_dotfiles_repo() {
    if [ ! -d "$DOTFILES_DIR" ]; then
        print_info "Cloning dotfiles repository..."
        git clone "$DOTFILES_REPO" "$DOTFILES_DIR"
    else
        print_info "Updating dotfiles repository..."
        git -C "$DOTFILES_DIR" pull
    fi
}

setup_ansible_galaxy() {
    print_info "Setting up Ansible Galaxy roles..."
    if ! command -v ansible-galaxy &> /dev/null; then
        print_error "Ansible is not installed. Please install Ansible first."
        exit 1
    fi

    local distro = $1
    if [ -f "$DOTFILES_DIR/requirements/$distro.yml" ]; then
        print_info "Using Ansible requirements file for $distro"
        ansible-galaxy install -r "$DOTFILES_DIR/requirements/$distro.yml"
    else
        print_warning "No specific requirements file found for $distro."
    fi

    ansible-galaxy install -r "$DOTFILES_DIR/requirements/common.yml"
}

# ==============================================================================
# COMMAND LINE ARGUMENTS
# ==============================================================================

cmd_help() {
    echo "Usage: dotfiles [ansible-playbook options]"
    echo "Options:"
    echo "  --help, -h        Show this help message"
    echo "  --tags, -t TAGS   Run specific roles (comma-separated)"
    echo "  --check, -C       Perform a dry run (check mode)"
    echo "  --verbose, -v     Increase verbosity (can be repeated for more verbosity)"
    echo "  --list-tags       List all available roles"
}

ansible_args=()
args_parse() {
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --help|-h)
                cmd_help
                exit 0
                ;;
            *)
                ansible_args+=("$1")
                shift
                ;;
        esac
    done
}

# ==============================================================================
# MAIN EXECUTION
# ==============================================================================

main() {
    # Parse command line arguments
    args_parse "$@"

    print_info "Starting dotfiles setup..."

    local distro=$(detect_distro)
    print_info "Detected distribution: $distro"

    case "$distro" in
        arch )
            print_info "Setting up for Arch Linux..."
            setup_arch
            ;;
        debian | ubuntu)
            print_warning "Debian/Ubuntu support is not implemented yet."
            exit 1
            ;;
        fedora)
            print_warning "Fedora support is not implemented yet."
            exit 1
            ;;
        *)
            print_error "Unsupported distribution: $distro"
            exit 1
            ;;
    esac

    setup_git_config
    setup_dotfiles_repo

    setup_ansible_galaxy "$distro"

    print_info "Running Ansible playbook..."
    if ! command -v ansible-playbook &> /dev/null; then
        print_error "Ansible is not installed. Please install Ansible first."
        exit 1
    fi

    ansible-playbook --inventory "$DOTFILES_DIR/inventory.ini" "$DOTFILES_DIR/playbook.yml" "${ansible_args[@]}"

    if is_first_run; then
        print_info "This is the first run. Marking first run complete."
        mark_first_run_complete
    else
        print_info "This is not the first run. Skipping first run setup."
    fi
}

# Run the main function
main "$@"